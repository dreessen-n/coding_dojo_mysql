USE friendship_schema;

-- Create 6 new users

INSERT INTO users
(first_name, last_name)
VALUES ('Thomas', 'Muller'), ('Leroy', 'Sane'), 
('Manuel', 'Neuer'), ('Joshua', 'Kimmich'),
('Alphonso', 'Davies'), ('Jamal', 'Musiala');

-- SELECT * FROM users;

-- Have user 1 be friends with user 2, 4, and 6

-- SELECT * FROM friendships;

INSERT INTO friendships
(user_id, friend_id)
VALUES (1, 2), (1, 4), (1, 6);

-- Have user 2 be friends with user 1, 3, and 5

INSERT INTO friendships
(user_id, friend_id)
VALUES (2, 1), (2, 3), (2, 5);

-- Have user 3 be friends with user 2 and 5
-- Have user 4 be friends with user 3
-- Have user 5 be friends with user 1 and 6
-- Have user 6 be friends with user 2 and 3

INSERT INTO friendships
(user_id, friend_id)
VALUES (3, 2), (3, 5), (4, 3), (5, 1), (5, 6), (6, 2), (6, 3);

-- Display the relationship created as shown in the table in the image

SELECT users.first_name, users.last_name, 
users2.first_name AS friend_first_name, users2.last_name AS friend_last_name
FROM users
LEFT JOIN friendships
ON users.id = friendships.user_id
LEFT JOIN users AS users2
ON users2.id = friendships.friend_id;

-- NINJA Query: Return all the users who are friends with the first user, make sure to display the names

SELECT CONCAT_WS(' ', users.first_name, users.last_name) AS user_name, 
GROUP_CONCAT(' ', users2.first_name, ' ', users2.last_name ORDER BY users2.first_name) AS friend_name
FROM users
JOIN friendships
ON users.id = friendships.user_id AND users.id = 1
JOIN users AS users2
ON users2.id = friendships.friend_id
GROUP BY users.id;

-- NINJA Query: Return the count of all the friendships

SELECT COUNT(friendships.id) AS friendship_count, 
CONCAT_WS(' ', users.first_name, users.last_name) AS user_name
FROM users
JOIN friendships ON users.id = friendships.user_id
GROUP BY users.id;

-- NINJA Query: Find out who has the most friends and return the count of their friends

SELECT COUNT(friendships.id) AS friendship_count, 
CONCAT_WS(' ', users.first_name, users.last_name) AS user_name
FROM users
JOIN friendships ON users.id = friendships.user_id
GROUP BY users.id
ORDER BY friendship_count DESC
LIMIT 1;

-- NINJA Query: Return the friends of the third user in alphabetical order

SELECT CONCAT_WS(' ', users.first_name, users.last_name) AS user_name, 
GROUP_CONCAT(' ', users2.first_name, ' ', users2.last_name ORDER BY users2.first_name) AS friend_name
FROM users
JOIN friendships
ON users.id = friendships.user_id AND users.id = 3
JOIN users AS users2
ON users2.id = friendships.friend_id;

